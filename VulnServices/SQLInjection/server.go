package main

import (
	"database/sql"
	"fmt"
	_ "github.com/mattn/go-sqlite3"
	"log"
	"net/http"
	"os"
)

var flag = os.Getenv("FLAG")

func initDb() {
	db, err := sql.Open("sqlite3", "user.db")
	if err != nil {
		panic(err)
	}
	defer db.Close()
	_, err = db.Exec("CREATE TABLE users " +
		"(`_id` INTEGER PRIMARY KEY AUTOINCREMENT, " +
		"`username` VARCHAR(64), " +
		"`password` VARCHAR(64))")
	if err != nil {
		panic(err)
	}
	db.Exec("insert into users (username, password) values ('admin', 'secret')")

	fmt.Println("Creating user database")

}

func renderIndex(w http.ResponseWriter, r *http.Request) {
	var form = `
	<div><form action="/login" method="POST">
	<p>Username: <input type="text" name="username" /></p>
	<p>Password: <input type="password" name="password" /></p>
	<p><input type="submit" value="Login" /></p>
	</form></div>`
	fmt.Fprint(w, form)
}

func Login(w http.ResponseWriter, r *http.Request) {
	db, err := sql.Open("sqlite3", "user.db")
	if err != nil {
		panic(err)
	}
	defer db.Close()
	login := r.FormValue("username")
	password := r.FormValue("password")
	sqlRequest := "SELECT username from users where username='" + login + "' and password='" + password + "'"
	fmt.Println(sqlRequest)
	rows, err := db.Query(sqlRequest)
	if err != nil {
		panic(err)
	}
	var username string
	rows.Next()
	rows.Scan(&username)
	fmt.Println(username)
	if username == "admin" {
		fmt.Fprintf(w, "Flag{%s}\n", flag)
	} else {
		fmt.Fprint(w, "Auth Error")
	}
}

func main() {
	initDb()
	fmt.Println("Starting Web Server with Open Redirect vulnerability")
	http.HandleFunc("/login", Login)
	http.HandleFunc("/", renderIndex)
	if err := http.ListenAndServe(":8000", nil); err != nil {
		log.Fatal(err)
	}
}
